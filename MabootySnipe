local NiggasToAvoid = {
    "007jimm",
    "SuzumoMalaki",
    "StartedManw2134",
    "22SaltyPineapples",
    "StartedManw2134",
    "shwalalala1",
    "ShwaDev",
    "ShwaDevZ",
    "historianaverage",
    "centerunlikely",
    "MrIppo"
}

local thingsTosnipe = {
    ["Fortune"] = getgenv().Settings.Books.FortunePrice,
    ["Chest Mimic"] = getgenv().Settings.Books.ChestMimicPrice,
    ["Lucky Block"] = getgenv().Settings.Books.LuckyBlockPrice,
    ["Shiny Hunter"] = getgenv().Settings.Books.ShinyHunterPrice,
    ["Huge Hunter"] = getgenv().Settings.Books.HugeHunterPrice,
    ["Titanic Christmas Present"] = getgenv().Settings.Present.TitanicPresentPrice,
    ["X-Large Christmas Present"] = getgenv().Settings.Present.XLargeChristmasPrice,
    ["Diamond Chest Mimic"] = getgenv().Settings.Books.DiamondChestMimic,
    ["Massive Comet"] = getgenv().Settings.Books.MassiveComet,
    ["Party Time"] = getgenv().Settings.Books.PartyTime
}

local keywords = {
    ["Royalty"] = getgenv().Settings.Charm.RoyaltyPrice,
    ["Exclusive"] = getgenv().Settings.Pets.EggPrice,
    ["Spinny"]= getgenv().Settings.Other.SpinnyPrice,
    ["Upper"] = getgenv().Settings.Other.UpperKey,
    ["Lower"] = getgenv().Settings.Other.LowerKey
}

repeat wait() until game:IsLoaded()

if not game.PlaceId == 8737899170 or not game.PlaceId == 15502339080 or not game.PlaceId == 15588442388 then wait(9e9) end

print('executed')

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local function serverHop(id)
    repeat
        local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s"
        local req = request({ Url = string.format(sfUrl, id, "Desc", 100) })
        local body = HttpService:JSONDecode(req.Body)
        if id == 15502339080 then
            if body.nextPageCursor ~= nil then
                req = request({ Url = string.format( sfUrl .. "&cursor=" .. body.nextPageCursor, id, "Desc", 100), })
            end
        end
        task.wait(0.1)
        local servers = {}
        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing >= math.random(40, 45) and v.id ~= game.JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        local randomCount = #servers
        if not randomCount then
            randomCount = 2
        end

        TeleportService:TeleportToPlaceInstance(id, servers[math.random(1, randomCount)], Players.LocalPlayer)
    until game.placeId ~= 8737899170
end

wait(20)
if game.placeId ~= getgenv().Settings.place then
    pcall(serverHop, getgenv().Settings.place)
    wait(60)
end

local p = tostring(game:GetService("Players").LocalPlayer)
local Library = require(game.ReplicatedStorage:WaitForChild('Library'))

for i, v in pairs(game:GetService("Players"):GetChildren()) do
    print(v.Name)

    for _, username in ipairs(NiggasToAvoid) do
        if v.Name == username and p ~= username then
            pcall(serverHop, getgenv().Settings.place)
            wait(60)
        end
    end
end

wait(10)

--//FUNCTION REGION
local function formatNumber(number)
    return tostring(number):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end

local function sendUpdate(uid, cost, item, version, shiny, amount, boughtFrom, boughtStatus, mention, timeTook)
	local gemamount = Players.LocalPlayer.leaderstats["ðŸ’Ž Diamonds"].Value
	local HttpService = game:GetService("HttpService")
	local webUrl, webContent, webColor, title
	
	if boughtStatus then
		webColor = tonumber(0x32CD32)
		webUrl = getgenv().Settings.snipeSuccess
		title = "Sniped " ..item.. " | Took: " ..timeTook
		if mention then
			webContent = "<@402681518197047306>"
		else
			webContent = ""
		end
	else
		webUrl = getgenv().Settings.snipeFail
		webColor = tonumber(0xFF0000)
		title = "Failed to Snipe " ..item
	end
	
	local message = {
		['content'] = webContent,
		['embeds'] = {
			{
				['title'] = title,
				['color'] = webColor,
				['timestamp'] = DateTime.now():ToIsoDate(),
				['fields'] = {
					{
						['name'] = "PRICE:",
						['value'] = tostring(cost) .. " :gem:",
					},
					{
						['name'] = "BOUGHT FROM:",
						['value'] = tostring(boughtFrom),
					},
					{
						['name'] = "AMOUNT:",
						['value'] = tostring(amount),
					},
					{
						['name'] = "REMAINING GEMS:",
						['value'] = tostring(gemamount),
					},
					{
						['name'] = "PETID:",
						['value'] = tostring(uid),
					},
					{
						['name'] = "TIME TOOK:",
						['value'] = tostring(timeTook) .. " :clock1:"
					}
				}
			}
		}
	}
	
	local jsonMessage = HttpService:JSONEncode(message)
	local success, errorMesssage = pcall(function() 
		HttpService:PostAsync(webUrl, jsonMessage)	
	end)
	if not success then
		local response = request({
			Url = webUrl,
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json"
			},
			Body = jsonMessage
		})
	end
end



local function checkListing(uid, cost, item, version, shiny, amount, username, playerid)
	local startTick, endTick
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local Library = require(ReplicatedStorage:WaitForChild('Library'))
	cost = tonumber(cost)
	local ping = false
	local type = {}
	pcall(function()
		type = Library.Directory.Pets[item]
	end)
	
	if amount == nil then
		amount = 1
	end
	
	if type.huge and gems <= getgenv().Settings.Pets.HugePrice then
		startTick = os.clock()
		local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
		endTick = os.clock() - startTick
		if buyPet then
			ping = true
		end
		sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
	elseif type.exclusiveLevel and not string.find(item, 'Banana') and not string.find(item, 'Coin') and cost <= getgenv().Settings.Pets.ExclusivePetPrice then
		startTick = os.clock()
		local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
		endTick = os.clock() - startTick
		sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
	elseif type.titanic and cost <= getgenv().Settings.Pets.TitanicPetPrice then
		startTick = os.clock()
		local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
		endTick = os.clock() - startTick
		if buyPet then
			ping = true
		end
		sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
	elseif item == "Titanic Christmas Present" and cost <= 50000 then
		startTick = os.clock()
		local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
		endTick = os.clock() - startTick
		sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
	elseif cost <= getgenv().Settings.Other.buyAnything then
		startTick = os.clock()
		local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
		endTick = os.clock() - startTick
		sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
	end

    
    for i, v in pairs(keywords) do
        if string.find(item, i) and cost <= v then
            startTick = os.clock()
            local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
            endTick = os.clock() - startTick
            if buyPet then
                ping = true
            end
            sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
        end
    end

    for i, v in pairs(thingsTosnipe) do
        if item == i and cost <= v then
            startTick = os.clock()
            local buyPet = ReplicatedStorage.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
            endTick = os.clock() - startTick
            if buyPet then
                ping = true
            end
            sendUpdate(uid, cost, item, version, shiny, amount, username, buyPet, ping, endTick)
        end
    end

end


local function create_platform(x, y, z)
    local p = Instance.new("Part")
    p.Anchored = true
    p.Name = "plat"
    p.Position = Vector3.new(x, y, z)
    p.Size = Vector3.new(10, 1, 10)
    p.Parent = game.Workspace
end

local function teleport(x, y, z)
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    -- Wait for the character to be available
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart then
        humanoidRootPart.CFrame = CFrame.new(Vector3.new(x, y, z))
    end
end

create_platform(-922, 190, -2338)
local aa = game.Workspace:FindFirstChild("plat")
repeat
    wait()
until aa ~= nil
teleport(-922, 195, -2338)

local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
Booths_Broadcast.OnClientEvent:Connect(function(username, message)
	if message ~= nil then
		if type(message) == "table" then
			local playerID = message['PlayerID']
			local listing = message["Listings"]
			for key, value in pairs(listing) do
				if type(value) == "table" then
					local uid = key
					local gems = value["DiamondCost"]
					local itemdata = value["ItemData"]
					if itemdata then
						local data = itemdata["data"]
						if data then
							local item = data["id"]
							local version = data["pt"]
							local shiny = data["sh"]
							local amount = data["_am"]
							checkListing(uid, gems, item, version, shiny, amount, username, playerID)
						end
					end
				end
			end
		end
	end
end)

--//JUMP
local niggaJump = coroutine.create(function ()
    while 1 do
        wait(5)
        game.Players.LocalPlayer.Character.Humanoid.Jump = true
    end
end)
coroutine.resume(niggaJump)

--//Anti AFK
local VirtualUser=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
VirtualUser:CaptureController()
VirtualUser:ClickButton2(Vector2.new())
end)
game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Disabled = true

--//OPTIMIZATION
setfpscap(10)
local lighting = game.Lighting
local terrain = game.Workspace.Terrain
terrain.WaterWaveSize = 0
terrain.WaterWaveSpeed = 0
terrain.WaterReflectance = 0
terrain.WaterTransparency = 0
lighting.GlobalShadows = false
lighting.FogStart = 0
lighting.FogEnd = 0
lighting.Brightness = 0
for i, v in pairs(game:GetDescendants()) do
	if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
		v.Material = "Plastic"
		v.Reflectance = 0
	elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
		v.Lifetime = NumberRange.new(0)
	elseif v:IsA("Explosion") then
		v.BlastPressure = 1
		v.BlastRadius = 1
	elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
		v.Enabled = false
	elseif v:IsA("MeshPart") then
		v.Material = "Plastic"
		v.Reflectance = 0
	end
end

for i, e in pairs(lighting:GetChildren()) do
	if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
		e.Enabled = false
	end
end
game:GetService('RunService'):Set3dRenderingEnabled(false)

--//DEAD SERVER CHECK
--//Low Players Hop

game:GetService("RunService").Stepped:Connect(function()
    local Players = game:GetService("Players")
    local getPlayers = Players:GetPlayers()
    PlayerInServer = #getPlayers
    if PlayerInServer < 25 then
        serverHop(getgenv().Settings.place)
    end
end)

--//TP TO ANOTHER SERVER AFTER 40MINS
wait(2400)
repeat
    pcall(serverHop, getgenv().Settings.place)
    wait(5)
until game.placeId ~= getgenv().Settings.place
