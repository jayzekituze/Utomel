local osclock = os.clock()
repeat task.wait(1) until game:IsLoaded()


print("booty works V8")
--// loadstring(game:HttpGet('https://raw.githubusercontent.com/jayzekituze/Utomel/main/MabootySnipe'))()

local MainPrices = {

    HugePrice = 24000000,
    TitanicPetPrice = 950000000,
    ExclusivePetPrice = 700000,
	EggPrice = 6000000,
    buyAnything = 2
}

local MgaLibro = {

    BossChestMimic = 50000000,
    ChestMimic = 50000000,
    DiamondChestMimic = 30000000,
	LuckyBlock = 20000000,
    MassiveComet = 10000000,
    ChestBreaker = 10000000,
    HugeHunter = 1000000
}


--PS99 ITEMS
local ItemsPS99 = {
    ["Exotic Treasure Flag"] = 50000,
    ["Mystery Ticket"] = 5000000,
    ["Titanic Christmas Present"] = 5000000,
    ["X-Large Christmas Present"] = 60000,
    ["2024 New Year"] = 10000,
    ["Spinny Wheel Ticket"]= 2000,
    ["Tech Wheel Ticket"]= 5000,
	["Booth Slot Voucher"]= 150000,
    ["Daycare Slot Voucher"] = 80000,
	["Clan Voucher"]= 500000,
    ["Crystal Key"] = 5000,  -- Direct value for "Crystal Key"
    ["Crystal Key Lower Half"] = 300,
	["Crystal Key Upper Half"] = 5000,
    ["Secret Key"] = 50000,
    ["Secret Key Lower Half"] = 500,
	["Secret Key Upper Half"] = 30000,
    ["Tech Key"] = 50000,
    ["Tech Key Lower Half"] = 500,
	["Tech Key Upper Half"] = 30000
}

--ulitmates
local Ultimates = {
    ["Black Hole"] = 50000000,
	["Chest Spell"] = 100000000,
    ["Tornado"] = 1000000
}

--potions
local PotionsPS99 = {
    ["The Cocktail"] = 50000,
}

--charms
local CharmsPS99 = {
	["Overload"] = 1000000,
    ["Royalty"] = 5000000,
    ["Glittering"]= 25000
}


wait(20)
game:GetService("RunService"):Set3dRenderingEnabled(false)
local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local Players = game:GetService('Players')
local Player = Players.LocalPlayer
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers
local http = game:GetService("HttpService")
local vu = game:GetService("VirtualUser")
local Library = require(game.ReplicatedStorage:WaitForChild('Library'))
local vu = game:GetService("VirtualUser")

local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildWhichIsA('Humanoid')

local function moveToPosition(position)
	local moveFinished = false
	local connection
	connection = humanoid.MoveToFinished:Connect(function(reached)
		moveFinished = reached
		if connection then
			connection:Disconnect()
		end
	end)
	humanoid:MoveTo(position)
	repeat task.wait() until moveFinished
end
	
moveToPosition(Vector3.new(-970, 284, -2278))
moveToPosition(Vector3.new(-935, 284, -2189))
moveToPosition(Vector3.new(-919, 285, -2183))

print("Anti AFKEY")
local VirtualUser=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
VirtualUser:CaptureController()
VirtualUser:ClickButton2(Vector2.new())
end)

local niggaJump = coroutine.create(function ()
    while 1 do
        wait(10)
        game.Players.LocalPlayer.Character.Humanoid.Jump = true
    end
end)
coroutine.resume(niggaJump)

local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtPet, class, boughtMessage, ping)
    local gemamount = Player.leaderstats["ðŸ’Ž Diamonds"] and Player.leaderstats["ðŸ’Ž Diamonds"].Value or 0
    local versionVal = { [2] = "Rainbow", [1] = "Golden" }
    local versionStr = versionVal[version] or (version == nil and "Normal" or "")
    local snipeMessage = string.format("Found a %s%s%s!", versionStr, shiny and " Shiny " or " ", item)
    local tag = string.find(item, "Huge") and "@everyone" or ""
    local colourcheck = boughtPet and 0x05ff00 or 0xff000f
    local failMessage = boughtPet and "Sniped! No errors occured!" or tostring(boughtMessage)

    local message1 = {
        ['content'] = tag,
        ['embeds'] = {{
            ['title'] = snipeMessage,
            ["color"] = tonumber(colourcheck),
            ["timestamp"] = DateTime.now():ToIsoDate(),
            ['fields'] = {{
                ['name'] = "*LISTING INFO* :",
                ['value'] = string.format("**Price :** %s gems \n**Amount :** %s\n**Seller :** ||%s||\n**Listing ID : ** ||%s||", tostring(gems), tostring(amount or 1), tostring(boughtFrom), tostring(uid)),
            }, {
                ['name'] = "*USER INFO* :",
                ['value'] = string.format("**User :** ||%s||\n**Remaining gems :** %s", Player.Name, tostring(gemamount)),
            }, {
                ['name'] = "*SNIPER INFO* :",
                ['value'] = string.format("**Status :** %s\n**Ping :** %s ms", failMessage, tostring(ping)),
            }},
            ['footer'] = {
                ['text'] = "V 3.2 by edmond.yv"
            },
            ['thumbnail'] = {
                ['url'] = "https://cdn.discordapp.com/attachments/1057080336313495614/1190229689126621235/target_PNG42.png?ex=65a10ac7&is=658e95c7&hm=51fb914c7330c90326660077f6487ce9238a26ad483ad38bbccc41cbc216ad59&"
            },
        }},
    }

    local jsonMessage = http:JSONEncode(message1)
    local success, webMessage = pcall(function()
        http:PostAsync(webhook, jsonMessage)
    end)
    if not success then
        local response = request({
            Url = webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = jsonMessage
        })
    end
end

local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
    local args = {
        [1] = playerid, --sellers roblox id
        [2] = {
            [tostring(uid)] = amount --id of the item and the amount
        }
    }
    local ping = Player:GetNetworkPing()
    if buytimestamp > listTimestamp then
        task.wait(3.4 - ping)
    end
    local boughtPet, boughtMessage = game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_RequestPurchase"):InvokeServer(unpack(args))
    processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, class, boughtMessage, math.floor(ping*1000))
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    if type(message) == "table" then
        local highestTimestamp = -math.huge
        local key, listing
        for v, value in pairs(message["Listings"] or {}) do
            if type(value) == "table" and value["ItemData"] and value["ItemData"]["data"] then
                local timestamp = value["Timestamp"]
                if timestamp > highestTimestamp then
                    highestTimestamp = timestamp
                    key = v
                    listing = value
                end
            end
        end
        if listing then
            local buytimestamp, listTimestamp = listing["ReadyTimestamp"], listing["Timestamp"]
            local data, playerid = listing["ItemData"]["data"], message['PlayerID']
            local gems, uid = tonumber(listing["DiamondCost"]), key
            local item, version, shiny = data["id"], data["pt"], data["sh"]
            local amount = tonumber(data["_am"]) or 1
            local class, unitGems = tostring(listing["ItemData"]["class"]), gems / amount

            print(string.format("%s listed %s %s - %s gems, %s gems/unit", tostring(username), tostring(amount), tostring(item), tostring(gems), tostring(unitGems)))

            if string.find(item, "Huge") and gems <= 100 then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                return
            elseif class == "Pet" then
                local type = Library.Directory.Pets[item]
                if type.exclusiveLevel and gems <= MainPrices.ExclusivePetPrice and item ~= "Banana" and item ~= "Coin" then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif type.titanic and gems <= MainPrices.TitanicPetPrice then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif type.huge and gems <= MainPrices.HugePrice then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                end
            elseif class == "Egg" and gems <= MainPrices.EggPrice then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                return
            elseif ((string.find(item, "Key") and not string.find(item, "Lower")) or string.find(item, "Ticket") or string.find(item, "Charm") or class == "Charm") and gems <= 50 then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                return
            elseif class == "Enchant" then
                if string.find(item, "Boss Chest Mimic") and gems <= MgaLibro.BossChestMimic then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif string.find(item, "Chest Mimic") and gems <= MgaLibro.ChestMimic then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif string.find(item, "Diamond Chest Mimic") and gems <= MgaLibro.DiamondChestMimic then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif string.find(item, "Lucky Block") and gems <= MgaLibro.LuckyBlock then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif string.find(item, "Massive Comet") and gems <= MgaLibro.MassiveComet then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif string.find(item, "Chest Breaker") and gems <= MgaLibro.ChestBreaker then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return
                elseif string.find(item, "Huge Hunter") and gems <= MgaLibro.HugeHunter then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                    return    
                end
                -- elseif gems <= MainPrices.buyAnything then
                --     coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
                --     return
            end

            for i, v in pairs(ItemsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

            for i, v in pairs(Ultimates) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

            for i, v in pairs(PotionsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end
			

			for i, v in pairs(CharmsPS99) do
				if item == i and gems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

        end
    end
end)

local function serverHop(id)
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true"
    local req = request({
        Url = string.format(sfUrl, id, "Desc", 100)
    })
    local body = HttpService:JSONDecode(req.Body)
    task.wait(0.2)
    local servers = {}
    if body and body.data then
        for i, v in next, body.data do
            if type(v) == "table" and v.playing >= 35 and v.id ~= game.JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end
    local randomCount = #servers
    if not randomCount then
        randomCount = 2
    end
    TeleportService:TeleportToPlaceInstance(id, servers[math.random(1, randomCount)], Players.LocalPlayer)
end


task.spawn(function()
    game:GetService("GuiService").ErrorMessageChanged:Connect(function()
        serverHop(place)
        game.Players.LocalPlayer:Kick("Found An Error, Reconnecting...")
        wait(0.1)
    end)
end)

if PlayerInServer < 25 then
    while task.wait(1) do
        serverHop(place)
    end
end

for i = 1, PlayerInServer do
    for _, alt in pairs(alts) do
        if getPlayers[i].Name == alt and alt ~= Players.LocalPlayer.Name then
            task.wait(math.random(0, 300))
            while task.wait(1) do
                serverHop(place)
            end
        end
    end
end


Players.PlayerRemoving:Connect(function(player)
    getPlayers = Players:GetPlayers()
    PlayerInServer = #getPlayers
    if PlayerInServer < 25 then
        while task.wait(1) do
            serverHop(place)
        end
    end
end)

local hopDelay = math.random(1500, 1800)

task.spawn(function ()
    while task.wait(1) do
        if math.floor(os.clock() - osclock) >= hopDelay then
            while task.wait(1) do
                serverHop(place)
            end
        end
    end
end)
