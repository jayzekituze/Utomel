local osclock = os.clock()
repeat task.wait() until game:IsLoaded()


print("booty works V5")
--// loadstring(game:HttpGet('https://raw.githubusercontent.com/jayzekituze/Utomel/main/MabootySnipe'))()
local MainPrices = {

    HugePrice = 12000000,
    TitanicPetPrice = 500000000,
    ExclusivePetPrice = 200000,
	EggPrice = 3000000,
    buyAnything = 5

}

--PS99 ITEMS
local ItemsPS99 = {
    ["Titanic Christmas Present"] = 1000000,
    ["X-Large Christmas Present"] = 60000,
    ["2024 New Year"] = 50000,
    ["Spinny Wheel Ticket"]= 5000,
	["Booth Slot Voucher"]= 150000,
    ["Crystal Key"] = 15000,  -- Direct value for "Crystal Key"
    ["Crystal Key Lower Half"] = 1500,
	["Crystal Key Upper Half"] = 10000
}

local PotionsPS99 = {
    ["The Cocktail"] = 50000,
	["Shiny Flag"] = 2500,
	["Rainbow Flag"] = 1000,
	["Exotic Treasure Flag"] = 25000
}

local EnchantsPS99 = {
    ["Fortune"] = 100000,
    ["Chest Mimic"] = 5000000,
    ["Lucky Block"] = 2000000,
    ["Shiny Hunter"] = 50000,
    ["Huge Hunter"] = 1000000,
    ["Diamond Chest Mimic"] = 5000000,
    ["Super Lightning"] = 100000,
    ["Massive Comet"] = 1000000,
	["Party Time"] = 50000
}

local CharmsPS99 = {
	["Overload"] = 1000000,
    ["Royalty"] = 1000000,
    ["Glittering"]= 25000
}

local Update5 = {
    ["Mystery Ticket"] = 1000000,
	["Magic Shard"] = 5000,
	["Mini Chest"] = 5000,
	["Daycare Slot Voucher"] = 100000,
	["Magic Orb"] = 100000,
	["Chest Breaker"] = 1000000,
	["Secret Key"] = 50000,
    ["Secret Key Lower Half"] = 5000,
	["Secret Key Upper Half"] = 30000
}



--[[
Credits List
ethereum: creating the base sniper
chocolog: providing type.huge
Edmond: offered tips for optimization and hop check functions
Root: kept the script uptodate
]]--
game:GetService("RunService"):Set3dRenderingEnabled(false)
local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local Players = game:GetService('Players')
local Player = Players.LocalPlayer
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers
local http = game:GetService("HttpService")
local ts = game:GetService("TeleportService")
local rs = game:GetService("ReplicatedStorage")
local pid = place or 15502339080

local vu = game:GetService("VirtualUser")
Players.LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	task.wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Disabled = true

local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildWhichIsA('Humanoid')

local function moveToPosition(position)
	local moveFinished = false
	local connection
	connection = humanoid.MoveToFinished:Connect(function(reached)
		moveFinished = reached
		if connection then
			connection:Disconnect()
		end
	end)
	humanoid:MoveTo(position)
	repeat task.wait() until moveFinished
end
	
moveToPosition(Vector3.new(-970, 284, -2278))
moveToPosition(Vector3.new(-935, 284, -2189))
moveToPosition(Vector3.new(-919, 285, -2183))

local Library = require(game.ReplicatedStorage:WaitForChild('Library'))
	
local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtPet, class, boughtMessage, ping)
	local gemamount = Player.leaderstats["ðŸ’Ž Diamonds"] and Player.leaderstats["ðŸ’Ž Diamonds"].Value or 0
    local versionVal = { [2] = "Rainbow", [1] = "Golden" }
    local versionStr = versionVal[version] or (version == nil and "Normal" or "")
    local snipeMessage = string.format("Found a %s%s%s!", versionStr, shiny and " Shiny " or " ", item)
    local tag = string.find(item, "Huge") and "@everyone" or ""
    local colourcheck = boughtPet and 0x05ff00 or 0xff000f
	local failMessage = boughtPet and "Sniped! No errors occured!" or tostring(boughtMessage)

    local message1 = {
    	['content'] = tag,
    	['embeds'] = {
		{
			['title'] = snipeMessage,
            ["color"] = tonumber(colourcheck),
            ["timestamp"] = DateTime.now():ToIsoDate(),
            ['fields'] = {
                {
                	['name'] = "*LISTING INFO* :",
                    ['value'] = string.format("**Price :** %s gems \n**Amount :** %s\n**Seller :** ||%s||\n**Listing ID : ** ||%s||", tostring(gems), tostring(amount or 1), tostring(boughtFrom), tostring(uid)),
                },
                {
                    ['name'] = "*USER INFO* :",
                    ['value'] = string.format("**User :** ||%s||\n**Remaining gems :** %s", Player.Name, tostring(gemamount)),
                },
				{
                    ['name'] = "*SNIPER INFO* :",
                    ['value'] = string.format("**Status :** %s\n**Ping :** %s ms", failMessage, tostring(ping)),
                }, 
				},
                	['footer'] = {
                    ['text'] = "V 3.2 by edmond.yv"
                },
            ['thumbnail'] = {
            	['url'] = "https://cdn.discordapp.com/attachments/1057080336313495614/1190229689126621235/target_PNG42.png?ex=65a10ac7&is=658e95c7&hm=51fb914c7330c90326660077f6487ce9238a26ad483ad38bbccc41cbc216ad59&"
            },
        },
    }
	}
    local jsonMessage = http:JSONEncode(message1)
	local success, webMessage = pcall(function()
		http:PostAsync(webhook, jsonMessage)
	end)
    if success == false then
	local response = request({
		Url = webhook,
		Method = "POST",
		Headers = {["Content-Type"] = "application/json"},
		Body = jsonMessage
	})
	end
end

local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
	local ping = Player:GetNetworkPing()
	if buytimestamp > listTimestamp then
		task.wait(3.4 - ping)
	end
	local boughtPet, boughtMessage = game:GetService("ReplicatedStorage").Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, class, boughtMessage, math.floor(ping*1000))
end

local not_allowed = {
	"prinzemark1020",
	"prinzemark1024",
	"prinzemark1029",
	"sopia_10899"
}

for _,v in ipairs(not_allowed) do
	if Players.LocalPlayer.Name == v then
		game:Shutdown()
	end
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
	if type(message) == "table" then
		local highestTimestamp = -math.huge -- Initialize with the smallest possible number
		local key = nil
		local listing = nil
        for v, value in pairs(message["Listings"] or {}) do
			if type(value) == "table" and value["ItemData"] and value["ItemData"]["data"] then
				local timestamp = value["Timestamp"]
				if timestamp > highestTimestamp then
					highestTimestamp = timestamp
					key = v
					listing = value
				end
			end
		end
		if listing then
			local buytimestamp = listing["ReadyTimestamp"]
			local listTimestamp = listing["Timestamp"]
			local data = listing["ItemData"]["data"]
			local gems = tonumber(listing["DiamondCost"])
            local uid = key
			local item = data["id"]
			local version = data["pt"]
			local shiny = data["sh"]
			local amount = tonumber(data["_am"]) or 1
			local playerid = message['PlayerID']
			local class = tostring(listing["ItemData"]["class"])
			local unitGems = gems/amount

			print(string.format("%s listed %s %s - %s gems, %s gems/unit", tostring(username), tostring(amount), tostring(item), tostring(gems), tostring(unitGems)))



			if string.find(item, "Huge") and unitGems <= 100 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
			elseif class == "Pet" then
				local type = Library.Directory.Pets[item]
				if type.exclusiveLevel and gems <= MainPrices.ExclusivePetPrice and item ~= "Banana" and item ~= "Coin" then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				elseif type.titanic and unitGems <= MainPrices.TitanicPetPrice then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
                elseif type.huge and gems <= MainPrices.HugePrice then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			elseif class == "Egg" and unitGems <= MainPrices.EggPrice then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
			elseif (string.find(item, "Ticket") or string.find(item, "Charm") or class == "Charm") and unitGems <= 500 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
			   return
			elseif gems <= 2 then
        	    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
			end

				--elseif gems <= 49 then
				--shouldMention = false
				--coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp, shouldMention)
				--return

			
            
            for i, v in pairs(ItemsPS99) do
				if item == i and unitGems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

            for i, v in pairs(PotionsPS99) do
				if item == i and unitGems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end
			

			for i, v in pairs(EnchantsPS99) do
				if item == i and unitGems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

			for i, v in pairs(CharmsPS99) do
				if item == i and unitGems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

			for i, v in pairs(Update5) do
				if item == i and unitGems <= v then
                    coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

		end
    end
end)

local function serverHop(id)
	local deep
	local HttpService = game:GetService("HttpService")
	local TeleportService = game:GetService("TeleportService")
	local Players = game:GetService("Players")
	local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s"
	local req = request({
		Url = string.format(sfUrl, id, "Desc", 100)
	})
	local body = HttpService:JSONDecode(req.Body)
	task.wait(0.2)
	req = request({
		Url = string.format(sfUrl .. "&cursor=" ..body.nextPageCursor, id, "Desc", 100)
	})
	body = HttpService:JSONDecode(req.Body)
	task.wait(0.1)
	local servers = {}
	if body and body.data then
		for i, v in next, body.data do
			if type(v) == "table" and v.playing >= 35 and v.id ~= game.JobId then
				table.insert(servers, 1, v.id)
			end
		end
	end
	local randomCount = #servers
	if not randomCount then
		randomCount = 2
	end
	TeleportService:TeleportToPlaceInstance(id, servers[math.random(1, randomCount)], Players.LocalPlayer)
end

local lighting = game.Lighting
local terrain = game.Workspace.Terrain
terrain.WaterWaveSize = 0
terrain.WaterWaveSpeed = 0
terrain.WaterReflectance = 0
terrain.WaterTransparency = 0
lighting.GlobalShadows = false
lighting.FogStart = 0
lighting.FogEnd = 0
lighting.Brightness = 0

for i, v in pairs(game:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    end
end

for i, e in pairs(lighting:GetChildren()) do
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    end
end

if PlayerInServer < 25 then
	while task.wait(1) do
		serverHop(place)
	end
end

for i = 1, PlayerInServer do
	for ii = 1,#alts do
        if getPlayers[i].Name == alts[ii] and alts[ii] ~= Players.LocalPlayer.Name then
        	task.wait(math.random(0, 300))
			while task.wait(1) do
				serverHop(place)
	    	end
        end
    end
end

task.spawn(function()
	game:GetService("GuiService").ErrorMessageChanged:Connect(function()
		serverHop(place)
		game.Players.LocalPlayer:Kick("Found An Error, Reconnecting...")
		print("Found An Error, Reonnecting...")
		wait(0.1)
	end)
end)

Players.PlayerRemoving:Connect(function(player)
	getPlayers = Players:GetPlayers()
	PlayerInServer = #getPlayers
	if PlayerInServer < 25 then
        while task.wait(1) do
	    	serverHop(place)
		end
	end
end)

local hopDelay = math.random(1000, 1500)

task.spawn(function ()
	while task.wait(1) do
		if math.floor(os.clock() - osclock) >= hopDelay then
			while task.wait(1) do
				serverHop(place)
			end
		end
	end
end)
