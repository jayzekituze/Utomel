-- Recursive function to find a child by name in a model or object
    local function findChildRecursive(parent, childName)
        local child = parent:FindFirstChild(childName)
        if child then
            return child
        end
    
        for _, descendant in ipairs(parent:GetDescendants()) do
            if descendant.Name == childName then
                return descendant
            end
        end
    
        return nil
    end
    
    -- Function to update the debug label
    local function updateDebugLabel(message)
        local player = game:GetService("Players").LocalPlayer
        local debugLabel = findChildRecursive(player:WaitForChild("PlayerGui"), "DebugLabel")
        if debugLabel then
            debugLabel.Text = message
        end
    end
    
    -- Teleport the player to the raid location at the start
    local function teleportToRaidStart()
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = findChildRecursive(character, "HumanoidRootPart")
        if hrp then 
            hrp.CFrame = CFrame.new(-7924.71777, 180.096298, -9327.33301, -0.616174281, 5.75478287e-09, -0.787609816, 6.60594379e-09, 1, 2.13858442e-09, 0.787609816, -3.88516552e-09, -0.616174281) 
        end
    end
    
    -- Teleport the player to the Adaptive Titan boss location
    -- Recursive function to find a child by name in a model or object
    local function findChildRecursive(parent, childName)
        local child = parent:FindFirstChild(childName)
        if child then
            return child
        end
    
        for _, descendant in ipairs(parent:GetDescendants()) do
            if descendant.Name == childName then
                return descendant
            end
        end
    
        return nil
    end
    
    -- Function to update the debug label
    local function updateDebugLabel(message)
        local player = game:GetService("Players").LocalPlayer
        local debugLabel = findChildRecursive(player:WaitForChild("PlayerGui"), "DebugLabel")
        if debugLabel then
            debugLabel.Text = message
        else
            print(message) -- Fallback if DebugLabel is not found
        end
    end
    
    -- Teleport the player to the raid location at the start
    local function teleportToRaidStart()
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = findChildRecursive(character, "HumanoidRootPart")
        if hrp then 
            hrp.CFrame = CFrame.new(-7924.71777, 180.096298, -9327.33301, -0.616174281, 5.75478287e-09, -0.787609816, 6.60594379e-09, 1, 2.13858442e-09, 0.787609816, -3.88516552e-09, -0.616174281) 
            updateDebugLabel("Teleported to Raid Start")
        end
    end
    
    -- Teleport the player to the Adaptive Titan boss location
    local function teleportToBoss()
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = findChildRecursive(character, "HumanoidRootPart")
        if hrp then 
            hrp.CFrame = CFrame.new(-11600.8408, 250.179428, -11484.5742, 0.99849534, 3.60299945e-09, 0.0548362397, -5.08048981e-09, 1, 2.68042779e-08, -0.0548362397, -2.70425424e-08, 0.99849534) 
            updateDebugLabel("Teleported to Boss")
        end
    end
    
    -- Main script logic
    local hasTeleportedToRaidStart = false
    
    while true do
        task.wait(2)
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = findChildRecursive(character, "HumanoidRootPart")
    
        -- Check if raid conditions are met (e.g., raid is open)
        local raidBar = findChildRecursive(player.PlayerGui, "RaidBar")
        local raidActiveGui = raidBar and raidBar:FindFirstChild("RaidActive")
        local raidText = raidActiveGui and raidActiveGui:FindFirstChild("Text")
        local raidBarElement = raidBar and raidBar:FindFirstChild("RaidBar")
    
        if raidActiveGui and raidActiveGui.Visible then
            if not hasTeleportedToRaidStart then
                -- Teleport to raid start location the first time the raid becomes active
                teleportToRaidStart()
                updateDebugLabel("RaidActive GUI is visible")
                hasTeleportedToRaidStart = true  -- Mark that the player has been teleported to the raid start
            end
    
            -- Check if the raid text contains "Ends in" and if the raid bar element is not full
            if raidText and string.match(raidText.Text, "Ends in") and raidBarElement and raidBarElement.PlayerDamage.Size.X.Offset < 1 then
                updateDebugLabel("Raid is in progress and ending soon")
                task.wait(3)
                -- Teleport to the boss after checking conditions
                teleportToBoss()
    
                -- Finding the proximity prompt recursively
                local proximityPrompt = findChildRecursive(workspace.Bosses["Adaptive Titan"].HumanoidRootPart, "ProximityPrompt")
                if proximityPrompt then
                    updateDebugLabel("Found Adaptive Titan ProximityPrompt")
                    proximityPrompt.MaxActivationDistance = math.huge
                    proximityPrompt:InputHoldBegin()
                    wait(proximityPrompt.HoldDuration)
                    proximityPrompt:InputHoldEnd()
    
                    local npcDialogue = findChildRecursive(player.PlayerGui, "NPCDialogue")
                    if npcDialogue then
                        local responseFrame = findChildRecursive(npcDialogue:FindFirstChild("DialogueFrame"), "ResponseFrame")
                        if responseFrame then
                            for _, option in pairs(responseFrame:GetChildren()) do
                                if option:IsA("TextButton") and option.Text == "LETS FIGHT!" then
                                    updateDebugLabel("Found and activated 'LETS FIGHT!' button")
                                    option:Activate()
                                    character:FindFirstChildOfClass("Humanoid").Jump = true
                                    break
                                end
                            end
                        end
                    end
                else
                    updateDebugLabel("Adaptive Titan ProximityPrompt not found")
                end
            end
    
            task.wait(3)
            local vInput = game:GetService("VirtualInputManager")
            local xsize, ysize = workspace.CurrentCamera.ViewportSize.X * 0.425, workspace.CurrentCamera.ViewportSize.Y * 0.796
            vInput:SendMouseButtonEvent(xsize, ysize, 0, true, game, 1)
            task.wait(0.005)
            vInput:SendMouseButtonEvent(xsize, ysize, 0, false, game, 1)
        else
            -- Reset the teleport flag if the raid is not active
            hasTeleportedToRaidStart = false
    
            -- Teleport the player back to the non-raid location if the raid is not happening
            if hrp then 
                hrp.CFrame = CFrame.new(460.122589, 247.562836, 5929.6377, 0.998433292, -1.28846711e-08, -0.0559547879, 1.23393251e-08, 1, -1.00916839e-08, 0.0559547879, 9.38542843e-09, 0.998433292) 
                updateDebugLabel("Teleported to Non-Raid Location")
            end
            task.wait(4)
            -- Finding the proximity prompt for David recursively
            local proximityPrompt = findChildRecursive(workspace.NPCs["David"].HumanoidRootPart, "ProximityPrompt")
            if proximityPrompt then
                proximityPrompt.MaxActivationDistance = math.huge
                proximityPrompt:InputHoldBegin()
                wait(proximityPrompt.HoldDuration)
                proximityPrompt:InputHoldEnd()
                
                local npcDialogue = findChildRecursive(player.PlayerGui, "NPCDialogue")
                if npcDialogue then
                    local responseFrame = findChildRecursive(npcDialogue:FindFirstChild("DialogueFrame"), "ResponseFrame")
                    if responseFrame then
                        for _, option in pairs(responseFrame:GetChildren()) do
                            if option:IsA("TextButton") and option.Text == "Yes please!" then
                                option:Activate()
                                character:FindFirstChildOfClass("Humanoid").Jump = true
                                break
                            end
                        end
                    end
                end
            end
    
            task.wait(3)
            local vInput = game:GetService("VirtualInputManager")
            local xsize, ysize = workspace.CurrentCamera.ViewportSize.X * 0.425, workspace.CurrentCamera.ViewportSize.Y * 0.796
            vInput:SendMouseButtonEvent(xsize, ysize, 0, true, game, 1)
            task.wait(0.005)
            vInput:SendMouseButtonEvent(xsize, ysize, 0, false, game, 1)
        end
    end
    
    
    -- Main script logic
    local hasTeleportedToRaidStart = false
    
    while true do
        task.wait(2)
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = findChildRecursive(character, "HumanoidRootPart")
    
        -- Check if raid conditions are met (e.g., raid is open)
        local raidBar = findChildRecursive(player.PlayerGui, "RaidBar")
        local raidActiveGui = raidBar and raidBar:FindFirstChild("RaidActive")
        local raidText = raidActiveGui and raidActiveGui:FindFirstChild("Text")
        local raidBarElement = raidBar and raidBar:FindFirstChild("RaidBar")
    
        if raidActiveGui and raidActiveGui.Visible then
            if not hasTeleportedToRaidStart then
                -- Teleport to raid start location the first time the raid becomes active
                teleportToRaidStart()
                updateDebugLabel("RaidActive GUI is visible")
                hasTeleportedToRaidStart = true  -- Mark that the player has been teleported to the raid start
            end
    
            -- Check if the raid text contains "Ends in" and if the raid bar element is not full
            if raidText and string.match(raidText.Text, "Ends in") and raidBarElement and raidBarElement.PlayerDamage.Size.X.Offset < 1 then
                updateDebugLabel("Raid is in progress and ending soon")
                task.wait(3)
                -- Teleport to the boss after checking conditions
                teleportToBoss()
    
                -- Finding the proximity prompt recursively
                local proximityPrompt = findChildRecursive(workspace.Bosses["Adaptive Titan"].HumanoidRootPart, "ProximityPrompt")
                if proximityPrompt then
                    updateDebugLabel("Found Adaptive Titan ProximityPrompt")
                    proximityPrompt.MaxActivationDistance = math.huge
                    proximityPrompt:InputHoldBegin()
                    wait(proximityPrompt.HoldDuration)
                    proximityPrompt:InputHoldEnd()
    
                    local npcDialogue = findChildRecursive(player.PlayerGui, "NPCDialogue")
                    if npcDialogue then
                        local responseFrame = findChildRecursive(npcDialogue:FindFirstChild("DialogueFrame"), "ResponseFrame")
                        if responseFrame then
                            for _, option in pairs(responseFrame:GetChildren()) do
                                if option:IsA("TextButton") and option.Text == "LETS FIGHT!" then
                                    updateDebugLabel("Found and activated 'LETS FIGHT!' button")
                                    option:Activate()
                                    character:FindFirstChildOfClass("Humanoid").Jump = true
                                    break
                                end
                            end
                        end
                    end
                else
                    updateDebugLabel("Adaptive Titan ProximityPrompt not found")
                end
            end
    
            task.wait(3)
            local vInput = game:GetService("VirtualInputManager")
            local xsize, ysize = workspace.CurrentCamera.ViewportSize.X * 0.425, workspace.CurrentCamera.ViewportSize.Y * 0.796
            vInput:SendMouseButtonEvent(xsize, ysize, 0, true, game, 1)
            task.wait(0.005)
            vInput:SendMouseButtonEvent(xsize, ysize, 0, false, game, 1)
        else
            -- Reset the teleport flag if the raid is not active
            hasTeleportedToRaidStart = false
    
            -- Teleport the player back to the non-raid location if the raid is not happening
            if hrp then 
                hrp.CFrame = CFrame.new(460.122589, 247.562836, 5929.6377, 0.998433292, -1.28846711e-08, -0.0559547879, 1.23393251e-08, 1, -1.00916839e-08, 0.0559547879, 9.38542843e-09, 0.998433292) 
            end
            task.wait(4)
            -- Finding the proximity prompt for David recursively
            local proximityPrompt = findChildRecursive(workspace.NPCs["David"].HumanoidRootPart, "ProximityPrompt")
            if proximityPrompt then
                proximityPrompt.MaxActivationDistance = math.huge
                proximityPrompt:InputHoldBegin()
                wait(proximityPrompt.HoldDuration)
                proximityPrompt:InputHoldEnd()
                
                local npcDialogue = findChildRecursive(player.PlayerGui, "NPCDialogue")
                if npcDialogue then
                    local responseFrame = findChildRecursive(npcDialogue:FindFirstChild("DialogueFrame"), "ResponseFrame")
                    if responseFrame then
                        for _, option in pairs(responseFrame:GetChildren()) do
                            if option:IsA("TextButton") and option.Text == "Yes please!" then
                                option:Activate()
                                character:FindFirstChildOfClass("Humanoid").Jump = true
                                break
                            end
                        end
                    end
                end
            end
    
            task.wait(3)
            local vInput = game:GetService("VirtualInputManager")
            local xsize, ysize = workspace.CurrentCamera.ViewportSize.X * 0.425, workspace.CurrentCamera.ViewportSize.Y * 0.796
            vInput:SendMouseButtonEvent(xsize, ysize, 0, true, game, 1)
            task.wait(0.005)
            vInput:SendMouseButtonEvent(xsize, ysize, 0, false, game, 1)
        end
    end
    
