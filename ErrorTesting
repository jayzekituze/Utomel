--[[
Credits List
ethereum: creating the base sniper
chocolog: providing type.huge
Edmond: offered tips for optimization and hop check functions
Root: kept the script uptodate
]]--

local osclock = os.clock()
repeat task.wait() until game:IsLoaded()


print("booty works")

local thingsTosnipe = {
    ["Fortune"] = 200000,
    ["Chest Mimic"] = 5000000,
    ["Lucky Block"] = 500000,
    ["Shiny Hunter"] = 300000,
    ["Huge Hunter"] = 1000000,
    ["Titanic Christmas Present"] = 300000,
    ["X-Large Christmas Present"] = 30000,
    ["Diamond Chest Mimic"] = 5000000,
    ["Massive Comet"] = 2000000,
    ["Party Time"] = 50000
}

local keywords = {
    ["Royalty"] = 1000000,
    ["Exclusive"] = 500000,
    ["Spinny"]= 5000,
    ["Upper"] = 10000,
    ["Lower"] = 3000
}


setfpscap(10)
game:GetService("RunService"):Set3dRenderingEnabled(false)
local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local Players = game:GetService('Players')
local Player = Players.LocalPlayer
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers
local http = game:GetService("HttpService")
local ts = game:GetService("TeleportService")
local rs = game:GetService("ReplicatedStorage")

local vu = game:GetService("VirtualUser")
Players.LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	task.wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Disabled = true

local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildWhichIsA('Humanoid')

local function moveToPosition(position)
	local moveFinished = false
	local connection
	connection = humanoid.MoveToFinished:Connect(function(reached)
		moveFinished = reached
		if connection then
			connection:Disconnect()
		end
	end)
	humanoid:MoveTo(position)
	repeat task.wait() until moveFinished
end
	
moveToPosition(Vector3.new(-970, 284, -2278))
moveToPosition(Vector3.new(-935, 284, -2189))
moveToPosition(Vector3.new(-919, 285, -2183))

local Library = require(game.ReplicatedStorage:WaitForChild('Library'))
	
local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtPet, class, boughtMessage, ping)
	local gemamount = Player.leaderstats["ðŸ’Ž Diamonds"] and Player.leaderstats["ðŸ’Ž Diamonds"].Value or 0
    local versionVal = { [2] = "Rainbow", [1] = "Golden" }
    local versionStr = versionVal[version] or (version == nil and "Normal" or "")
    local snipeMessage = string.format("Found a %s%s%s!", versionStr, shiny and " Shiny " or " ", item)
    local tag = string.find(item, "Huge") and "@everyone" or ""
    local colourcheck = boughtPet and 0x05ff00 or 0xff000f
	local failMessage = boughtPet and "Sniped! No errors occured!" or tostring(boughtMessage)

    local message1 = {
    	['content'] = tag,
    	['embeds'] = {
		{
			['title'] = snipeMessage,
            ["color"] = tonumber(colourcheck),
            ["timestamp"] = DateTime.now():ToIsoDate(),
            ['fields'] = {
                {
                	['name'] = "*LISTING INFO* :",
                    ['value'] = string.format("**Price :** %s gems \n**Amount :** %s\n**Seller :** ||%s||\n**Listing ID : ** ||%s||", tostring(gems), tostring(amount or 1), tostring(boughtFrom), tostring(uid)),
                },
                {
                    ['name'] = "*USER INFO* :",
                    ['value'] = string.format("**User :** ||%s||\n**Remaining gems :** %s", Player.Name, tostring(gemamount)),
                },
				{
                    ['name'] = "*SNIPER INFO* :",
                    ['value'] = string.format("**Status :** %s\n**Ping :** %s ms", failMessage, tostring(ping)),
                }, 
				},
                	['footer'] = {
                    ['text'] = "Kyle the Sniper V1"
                },
            ['thumbnail'] = {
            	['url'] = "https://cdn.discordapp.com/attachments/911765351132430366/971374855989657620/unknown.png?ex=65a7bbd4&is=659546d4&hm=3d232aa4e41297f2033bb04f27199c0e6733cd3e0aa2375d1bebef3a255ccde0&"
            },
        },
    }
	}
    local jsonMessage = http:JSONEncode(message1)
	local success, webMessage = pcall(function()
		http:PostAsync(getgenv().snipeSuccess, jsonMessage)
	end)
    if success == false then
	local response = request({
		Url = getgenv().snipeFail,
		Method = "POST",
		Headers = {["Content-Type"] = "application/json"},
		Body = jsonMessage
	})
	end
end

local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
	local ping = Player:GetNetworkPing()
	if buytimestamp > listTimestamp then
		task.wait(3.4 - ping)
	end
	local boughtPet, boughtMessage = game:GetService("ReplicatedStorage").Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, class, boughtMessage, math.floor(ping*1000))
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
	if type(message) == "table" then
		local highestTimestamp = -math.huge -- Initialize with the smallest possible number
		local key = nil
		local listing = nil
        for v, value in pairs(message["Listings"] or {}) do
			if type(value) == "table" and value["ItemData"] and value["ItemData"]["data"] then
				local timestamp = value["Timestamp"]
				if timestamp > highestTimestamp then
					highestTimestamp = timestamp
					key = v
					listing = value
				end
			end
		end
		if listing then
			local buytimestamp = listing["ReadyTimestamp"]
			local listTimestamp = listing["Timestamp"]
			local data = listing["ItemData"]["data"]
			local gems = tonumber(listing["DiamondCost"])
            local uid = key
			local item = data["id"]
			local version = data["pt"]
			local shiny = data["sh"]
			local amount = tonumber(data["_am"]) or 1
			local playerid = message['PlayerID']
			local class = tostring(listing["ItemData"]["class"])
			local unitGems = gems/amount
			local type = {}
			pcall(function()
			type = Library.Directory.Pets[item]
			end)

			print(string.format("%s listed %s %s - %s gems, %s gems/unit", tostring(username), tostring(amount), tostring(item), tostring(gems), tostring(unitGems)))




			if type.huge and unitGems <= 5000000 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
				
			elseif type.titanic and unitGems <= 5000000 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
				
			elseif type.exclusiveLevel and not string.find(item, 'Coin') and not string.find(item, 'Banana') and unitGems <= 70000 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
				
			elseif unitGems <= 49 then
				coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
				return
			end	
			

			for i, v in pairs(keywords) do
				if string.find(item, i) and unitGems <= v then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

			for i, v in pairs(thingsTosnipe) do
				if item == i and unitGems <= v then
					coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp)
					return
				end
			end

		
		end
    end
end)


local function jumpToServer()
	local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true" 
	local req = request({ Url = string.format(sfUrl, 15502339080, "Desc", 100) }) 
	local body = http:JSONDecode(req.Body) 
	local deep = math.random(1, 3)
	if deep > 1 then
        	for i = 1, deep, 1 do 
             		req = request({ Url = string.format(sfUrl .. "&cursor=" .. body.nextPageCursor, 15502339080, "Desc", 100) }) 
             		body = http:JSONDecode(req.Body) 
            		task.wait(0.1)
        	end
	end

    local servers = {}
    if body and body.data then
        for i, v in next, body.data do
        	if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                	table.insert(servers, v.id)
        	end
        end
    end

    local randomCount = #servers
    if not randomCount then
		randomCount = 2
    end
    ts:TeleportToPlaceInstance(15502339080, servers[math.random(1, randomCount)], game:GetService("Players").LocalPlayer) 
end

if PlayerInServer < 25 then
	while task.wait(1) do
		jumpToServer()
	end
end

for i = 1, PlayerInServer do
	for ii = 1,#alts do
        if getPlayers[i].Name == alts[ii] and alts[ii] ~= Players.LocalPlayer.Name then
        	task.wait(math.random(0, 300))
			while task.wait(1) do
				jumpToServer()
	    	end
        end
    end
end

task.spawn(function()
	game:GetService("GuiService").ErrorMessageChanged:Connect(function()
		game.Players.LocalPlayer:Kick("Found An Error, Reconnecting...")
		print("Found An Error, Reonnecting...")
		wait(0.1)
		jumpToServer()
	end);
end)

Players.PlayerRemoving:Connect(function(player)
	getPlayers = Players:GetPlayers()
	PlayerInServer = #getPlayers
	if PlayerInServer < 25 then
        	while task.wait(1) do
	    		jumpToServer()
		end
	end
end) 

Players.PlayerAdded:Connect(function(player)
	for i = 1,#alts do
		if player.Name == alts[i] and alts[i] ~= Players.LocalPlayer.Name then
			while task.wait(1) do
				jumpToServer()
			end
        end
    end
end)

local hopDelay = math.random(2400, 2000)

while task.wait(1) do
	if math.floor(os.clock() - osclock) >= hopDelay then
		while task.wait(1) do
			jumpToServer()
		end
	end
end
