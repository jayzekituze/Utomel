EggNumber = 113;

local ReplicatedStorage = game:GetService("ReplicatedStorage") :: ReplicatedStorage & {Library: ModuleScript; Network: ModuleScript & {Eggs_RequestPurchase: RemoteFunction}}
local Workspace = game:GetService("Workspace") :: Workspace & {__THINGS: Folder & {Eggs: Folder}}
local Things = Workspace.__THINGS
local Players = game:GetService("Players")
local Player = Players.LocalPlayer :: Player & {PlayerScripts: Folder & {Scripts: Folder & {Game: Folder & {["Egg Opening Frontend"]: LocalScript}}}, Character: Model & {HumanoidRootPart: Part}}
local Library: {Save: {Get: () -> {MaximumAvailableEgg: number; EggHatchCount: number;}}}  = require(ReplicatedStorage.Library)
local EggsUtilMod: {GetIdByNumber: (number) -> number} = require(ReplicatedStorage.Library.Util.EggsUtil)
local PlayerInfo = Library.Save.Get()
local EggAnim : {PlayEggAnimation: () -> nil} = getsenv(Player.PlayerScripts.Scripts.Game["Egg Opening Frontend"])
local Eggs: Folder = Things.Eggs:FindFirstChild("Main") or Things.Eggs:FindFirstChild("World2")
local Egg = Eggs[EggNumber .. " - Egg Capsule"] :: Model & {Tier: Part}
local Teleport = Egg.Tier.CFrame

hookfunction(EggAnim.PlayEggAnimation, function()
    return
end)

while task.wait(0.1) do
    local BestEggName = EggsUtilMod.GetIdByNumber(EggNumber)
    local EggHatchCount = PlayerInfo.EggHatchCount

    Player.Character.HumanoidRootPart.CFrame = Teleport

    repeat
        local success: boolean = ReplicatedStorage.Network.Eggs_RequestPurchase:InvokeServer(BestEggName, EggHatchCount)
    until success       
end
