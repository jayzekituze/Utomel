function serverhop()
    local numbers = {48, 45, 40, 35, 30}

    local MINIMUM_PLAYERS = numbers[math.random(1, #numbers)]

    --// Services
    local Players = game:GetService("Players")
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")

    local CurrentWorld = ""
    local CurrentPosition = nil

    --// Variables
    local PlaceId = game.PlaceId
    local fileName = string.format("%s_servers.json", tostring(PlaceId))
    local ServerHopData = {
        CheckedServers = {},
        LastTimeHop = nil,
        CreatedAt = os.time()
    }

    -- Load data from disk/workspace
    if isfile(fileName) then
        local fileContent = readfile(fileName)
        ServerHopData = HttpService:JSONDecode(fileContent)
    end

    -- Optional log feature
    if ServerHopData.LastTimeHop then
        print("Took", os.time() - ServerHopData.LastTimeHop, "seconds to server hop")
    end

    local ServerTypes = { ["Normal"] = "desc", ["Low"] = "asc" }

    function Jump(serverType)
        serverType = serverType or "Normal"
        if not ServerTypes[serverType] then serverType = "Normal" end

        local LocalPlayer = Players.LocalPlayer
        if not LocalPlayer then
            warn("LocalPlayer not found.")
            return
        end

        local function GetServerList(cursor)
            cursor = cursor and "&cursor=" .. cursor or ""
            local API_URL = string.format('https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=100', tostring(PlaceId), ServerTypes[serverType])
            return HttpService:JSONDecode(game:HttpGet(API_URL .. cursor))
        end

        local currentPageCursor = nil
        while true do
            local success, serverList = pcall(GetServerList, currentPageCursor)
            if not success then
                warn("Error fetching server list:", serverList)
                break
            end

            currentPageCursor = serverList.nextPageCursor

            for _, server in ipairs(serverList.data) do
                if server.playing and tonumber(server.playing) >= MINIMUM_PLAYERS and tonumber(server.playing) < Players.MaxPlayers and not table.find(ServerHopData.CheckedServers, tostring(server.id)) then
                    ServerHopData.LastTimeHop = os.time()
                    table.insert(ServerHopData.CheckedServers, server.id)
                    local success, result = pcall(function()
                        TeleportService:TeleportToPlaceInstance(PlaceId, server.id, LocalPlayer)
                    end)
                    if not success then
                        warn("Error teleporting:", result)
                        break
                    end
                    wait(0.25)
                end
            end

            if not currentPageCursor then
                break
            else
                wait(0.25)
            end
        end
    end

    Jump("Low")
end

serverhop()
