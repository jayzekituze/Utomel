getgenv().Settings = {
    ["AutoMail"] = {
        ["AutoKICK"] = false,
        ["Minimum"] = 50000000000,
        ["Username"] = "",
        ["Webhook"] = "",
        ["CodeName"] = false,
        ["CodeNames"] = {
            ["user"] = "code",
        },
    }
}
repeat wait() until game:IsLoaded()
local Library = require(game:WaitForChild("ReplicatedStorage").Library)
debug.setupvalue(Library.Network.Invoke,1,function() return true end)
debug.setupvalue(Library.Network.Fire,1,function() return true end)
local playername = game.Players.LocalPlayer.Name
local playerId = game.Players.LocalPlayer.UserId
-- CREDITS TO RAFA YES
local localPlayer = game:GetService("Players").LocalPlayer
local CurrentWorld : string = ""
local CurrentPosition = nil
local MAIL_POSITION = Vector3.new(255, 97, 351)
local MAIL_WORLD = "Spawn"

function TptoMail()
	CurrentWorld = Library.WorldCmds.Get()
	
	local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")
	local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	CurrentPosition = character:WaitForChild("HumanoidRootPart").CFrame
	task.wait()
	
	-- Go to Spawn World
	if CurrentWorld ~= MAIL_WORLD then
		Library.WorldCmds.Load(MAIL_WORLD)
	end

	humanoidRootPart.CFrame = CFrame.new(MAIL_POSITION) 
end



local Gems2 = Library.Save.Get().Diamonds
repeat
    wait()
    Gems2 = Library.Save.Get().Diamonds
until Gems2 ~= nil

local function SendMail(username)
    local args = {
        Recipient = username,
        Message = "",
        Pets = {},
        Diamonds = Gems2 - 100000
    }
    return Library.Network.Invoke("Send Mail", args)
end

local function format(number)
    return tostring(number):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end

local function SendWeb(web)
        for key, value in pairs(getgenv().Settings["AutoMail"]["Codenames"]) do
            if key == playername then
                if getgenv().Settings["AutoMail"]["Codename"] then
                    request({
                        Url = web,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = game:GetService("HttpService"):JSONEncode{
                            ["username"] = "BLACK",
                            ["embeds"] = {
                                {
                                  ["color"] =  tonumber("0x00FF00", 16),
                                  ["title"] = "AUTO MAIL BY HACHIKO",
                                  ["fields"] = {
                                    {
                                        ["name"] = "User:",
                                        ["value"] = value,
                                        ["inline"] = true
                                    },
                                    {
                                        ["name"] = "TOTAL AMOUNT:",
                                        ["value"] = format(Gems2),
                                        ["inline"] = true
                                    },
                                    ["timestamp"] = os.date("%Y-%m-%dT%X.000Z")
                                },
                                  ["author"] = {
                                    ["name"] = "Mystic Farmer - Stats"
                                  }
                                }
                              }
                              }
                    })
                else
                    -- local msg = {
                    --     ["username"] = "BLACK",
                    --     ["embeds"] = {
                    --         {
                    --             ["color"] =  tonumber("0x00FF00", 16),
                    --             ["title"] = "AUTO MAIL BY HACHIKO",
                    --             -- ["thumbnail"] {
                    --             --     ["url"] = 
                    --             -- }
                    --             ["fields"] = {
                    --                 {
                    --                     ["name"] = "User:",
                    --                     ["value"] = playername,
                    --                     ["inline"] = true
                    --                 },
                    --                 {
                    --                     ["name"] = "TOTAL AMOUNT:",
                    --                     ["value"] = format(Gems2),
                    --                     ["inline"] = true
                    --                 },
                    --                 ["timestamp"] = os.date("%Y-%m-%dT%X.000Z")
                    --             },
                    --             ["footer"] = {
                    --                 ["text"] = ""
                    --             }
                    --         }
                    --     }
                    -- }
                    -- request = http_request or request or HttpPost or syn.request
                    -- request(
                    --     {
                    --         Url = web,
                    --         Method = "POST",
                    --         Headers = {["Content-Type"] = "application/json"},
                    --         Body = game.HttpService:JSONEncode(msg)
                    --     }
                    -- )
                    request({
                        Url = web,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = game:GetService("HttpService"):JSONEncode{
                            ["username"] = "BLACK",
                            ["embeds"] = {
                                {
                                  ["color"] =  tonumber("0x00FF00", 16),
                                  ["title"] = "AUTO MAIL BY HACHIKO",
                                  ["fields"] = {
                                    {
                                        ["name"] = "User:",
                                        ["value"] = playername,
                                        ["inline"] = true
                                    },
                                    {
                                        ["name"] = "TOTAL AMOUNT:",
                                        ["value"] = format(Gems2),
                                        ["inline"] = true
                                    },
                                    ["timestamp"] = os.date("%Y-%m-%dT%X.000Z")
                                },
                                  ["author"] = {
                                    ["name"] = "Mystic Farmer - Stats"
                                  }
                                }
                              }
                              }
                    })
                end
            end
        end
end
function create_platform(x, y, z)
	local p = Instance.new("Part")
	p.Anchored = true
	p.Name = "plat"
	p.Position = Vector3.new(x, y, z)
	p.Size = Vector3.new(100, 1, 100)
	p.Parent = game.Workspace
end

function FrTeleportToWorld(world, area)
    local Library = require(game:GetService("ReplicatedStorage").Library)
    Library.WorldCmds.Load(world)
    wait(0.25)
    local areaTeleport = Library.WorldCmds.GetMap().Teleports:FindFirstChild(area)
    Library.Signal.Fire("Teleporting")
    task.wait(0.25)
    local Character = game.Players.LocalPlayer.Character
    local Humanoid = Character.Humanoid
    local HumanoidRootPart = Character.HumanoidRootPart
    Character:PivotTo(areaTeleport.CFrame + areaTeleport.CFrame.UpVector * (Humanoid.HipHeight + HumanoidRootPart.Size.Y / 2))
    Library.Network.Fire("Performed Teleport", area)
    task.wait(0.25)
end

function FrTeleportToArea(world, area)
local areaTeleport = Library.WorldCmds.GetMap().Teleports:FindFirstChild(area)
    local Character = game.Players.LocalPlayer.Character
    local Humanoid = Character.Humanoid
    local HumanoidRootPart = Character.HumanoidRootPart
    Character:PivotTo(areaTeleport.CFrame + areaTeleport.CFrame.UpVector * (Humanoid.HipHeight + HumanoidRootPart.Size.Y / 2))
    Library.Network.Fire("Performed Teleport", area)

end
function Teleport(x, y, z)
    local character = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    CurrentPosition = character:WaitForChild("HumanoidRootPart").CFrame
    task.wait()

    humanoidRootPart.CFrame = CFrame.new(x, y, z)
end
function get_coins_in_area(area)
    local allCoins = Invoke("Get Coins") -- this gets every coin in the world you are in
    local coinsInArea = {} -- Make a blank list that will store all the ids of the coins in the area
    
    for coinid,coindata in pairs(allCoins) do -- Loop through every coin in the world
        if coindata.a == area and not string.find(coindata.n, "Chest") then -- if the area the coin is in is in the area you specify then...
            table.insert(coinsInArea, coinid) -- add the coin id to the coinsinarea table
        end
    end
    return coinsInArea
end

function attack_coin(id, equip)
    local v86 = Invoke("Join Coin", id, equip)
    for v88, v89 in pairs(v86) do
        Fire("Farm Coin", id, v88);
    end
end

function wait_until_broken(id)
    while 1 do
        wait(0.01)
        for i,v in pairs(Invoke("Get Coins")) do
            found = false
            if i == id then
                if #v.petsFarming ~= 0 then
                    found = true
                end
            end
        end
        if not found then break end
    end
end



task.wait(30)
if Gems2 ~= getgenv().Settings["AutoMail"]["Minimum"] then
    TptoMail()
    task.wait(10)
    print("Sending Gems")
    SendMail(getgenv().Settings["AutoMail"]["Username"])
    task.wait(1)
    SendWeb(getgenv().Settings["AutoMail"]["Webhook"])
    task.wait(1)
    if getgenv().Settings["AutoMail"]["AutoKICK"] then
        localPlayer:Kick("BYE")
    else
        print("ILOVE YOU BABY")
    end
end
